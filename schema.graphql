input CreateUserInput {
  name: String!
  imageUrl: String!
  clientMutationId: String
}

type CreateUserPayload {
  user: User
  clientMutationId: String
}

type Mutation {
  createUserMutation(input: CreateUserInput!): CreateUserPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Post {
  # The ID of an object
  id: ID!
  name: String

  # The posts creator
  author: User

  # The posts description
  description: String
}

# A connection to a list of items.
type PostConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PostEdge]
}

# An edge in a connection.
type PostEdge {
  # The item at the end of the edge
  node: Post

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
}

type Subscription {
  userCreated: User
}

type User implements Node {
  # The ID of an object
  id: ID!
  name: String
  imageUrl: String
  posts(after: String, first: Int, before: String, last: Int): PostConnection
  totalPosts: String
}

type Viewer {
  # The ID of an object
  id: ID!
  users: [User]
  user(id: ID): User
  posts(after: String, first: Int, before: String, last: Int): PostConnection
  post(postId: String): Post
}

